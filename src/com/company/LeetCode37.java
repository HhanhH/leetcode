package com.company;

import java.util.Arrays;

/**
 * 数独求解
 */
public class LeetCode37 {
    static boolean[][] r = new boolean[9][10];
    static boolean[][] c = new boolean[9][10];
    static boolean[][] b = new boolean[9][10];

    public static void slo(char[][] str) {


        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                char t = str[i][j];
                if (t == '.') continue;
                int cur = t - '0';
                r[i][cur] = true;
                c[j][cur] = true;
                b[i / 3 * 3 + j / 3][cur] = true;
            }
        }
        fill(str,0,0);


    }

    private static  boolean fill(char[][] s, int x, int y) {
        if (y == 9) {
            return true;
        }

        int nx = (x + 1) % 9; //列
        int ny = (nx == 0) ? y + 1 : y; //行

        if (s[y][x] != '.') {
            return fill(s, nx, ny);
        }
        //遍历数字1-9
        for (int i = 1; i <= 9; i++) {
            int bb = y / 3 * 3 + x / 3; //计算第几个box  0 1 2 ,3 4 5 , 6 7 8
            //如果这个数字在当前行，当前列，当前box都没有使用，则可以使用
            if (!r[y][i] && !c[x][i] && !b[bb][i]) {
                //使用这个数字进行填充
                r[y][i] = true;
                c[x][i] = true;
                b[bb][i] = true;
                s[y][x] =(char)(i+'0');
                //填充下一个空格
                if (fill(s, nx, ny)) {
                    return true;
                }
                r[y][i] = false;
                c[x][i] = false;
                b[bb][i] = false;
                s[y][x] ='.';
            }
        }
        return false;
    }

    public static void main(String[] args) {
        char[][] s ={{'.','.','9','7','4','8','.','.','.'},{'7','.','.','.','.','.','.','.','.'},{'.','2','.','1','.','9','.','.','.'},{'.','.','7','.','.','.','2','4','.'},{'.','6','4','.','1','.','5','9','.'},{'.','9','8','.','.','.','3','.','.'},{'.','.','.','8','.','3','.','2','.'},{'.','.','.','.','.','.','.','.','6'},{'.','.','.','2','7','5','9','.','.'}}

//                {{'.','.','9','7','4','8','.','.','.'},{'7','.','.','.','.','.','.','.','.'},{'.','2','.','1','.','9','.','.','.'},{'.','.','7','.','.','.','2','4','.'},{'.','6','4','.','1','.','5','9','.'},{'.','9','8','.','.','.','3','.','.'},{'.','.','.','8','.','3','.','2','.'},{'.','.','.','.','.','.','.','.','6'},{'.','.','.','2','7','5','9','.','.'}}
                ;
//                {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};

//        {{'8','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
        slo(s);
        for (int i =0;i<9;i++)
        System.out.println(Arrays.toString(s[i]));
    }
}
